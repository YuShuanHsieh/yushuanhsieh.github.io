<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Life on 文組工程師</title>
    <link>https://yushuanhsieh.github.io/categories/life/</link>
    <description>Recent content in Life on 文組工程師</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Mar 2020 08:00:00 +0800</lastBuildDate>
    
        <atom:link href="https://yushuanhsieh.github.io/categories/life/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Switch to a register-based calling convention for Go functions</title>
      <link>https://yushuanhsieh.github.io/post/2021-04-24-go-calling-convention/</link>
      <pubDate>Sat, 24 Apr 2021 01:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2021-04-24-go-calling-convention/</guid>
      <description>自己對於 memory layout 相關議題都蠻感興趣的，而這次 Go 1.17 有一項效能改善的 proposal: switch to a register-based calling convention for Go functions 剛好跟 memory 有相關，因此就看了一下 proposal 文件介紹，不但複習了在計算機架構中曾接觸到的 calling convention 知識，也對於 Go 內部機制有更多認識。</description>
    </item>
    
    <item>
      <title>近況雜談</title>
      <link>https://yushuanhsieh.github.io/post/2021-03-07-lab4-multiprocessor/</link>
      <pubDate>Thu, 22 Apr 2021 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2021-03-07-lab4-multiprocessor/</guid>
      <description>一個月沒有更新 blog，因為遇上了一些事情要處理，再加上剛好正值工作轉換之際，以及面對研究所考試和 paper study，所以就停筆了，不過還是有在持續地進修，學習的包含 security 和 system design 部分，並且每天刷 leetcode 訓練邏輯能力防失智。</description>
    </item>
    
    <item>
      <title>L1 Cache architecture in ARM</title>
      <link>https://yushuanhsieh.github.io/post/2021-02-18-l1-cache-arm/</link>
      <pubDate>Thu, 18 Feb 2021 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2021-02-18-l1-cache-arm/</guid>
      <description>L1 Cache architecture 之所以會看這個主題，是因為網路黑貓(Champ Yen)大大分享 ARM 從 virtual cache 轉到 physical cache 的利弊。雖然曾經從書上看過兩者差異性，不過沒搭配硬體架構，總覺得沒有好好了解。因此這篇整理了 ARM Programmer’s Guide 的內容，並透過實際例子來探討 VIVT (virtual indexed vritual tagged)、VIPT(virtual indexed physical tagged)、PIPT(physical indexed physical tagged) 的差異性。</description>
    </item>
    
    <item>
      <title>TH02 sensor device driver</title>
      <link>https://yushuanhsieh.github.io/post/2021-02-11-th02-driver/</link>
      <pubDate>Wed, 10 Feb 2021 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2021-02-11-th02-driver/</guid>
      <description>馬上就要過年了，最近在整理物品的時候，突然找到一年前為了玩板子而亂買的 Grove sensor，回想當時雖然對於韌體很感興趣，不過由於工作關係，因此把大部分進修時間都花在 Web 議題，沒能完成 sensor 韌體，留下一個遺憾。而既然這次被我找出來，近期工作又是都以 FPGA 板子居多，對於相關概念已有基本認知，覺得是時候把它實作出來，了結一年前給自己的課題。
硬體  Grove Temperature&amp;amp;Humidity Sensor (High-Accuracy &amp;amp; Mini) Raspberry Pi 3 Model B (Linux kernel 5.</description>
    </item>
    
    <item>
      <title>CSE 506 Lab 3 - Interrupts</title>
      <link>https://yushuanhsieh.github.io/post/2021-01-26-lab3_2/</link>
      <pubDate>Tue, 26 Jan 2021 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2021-01-26-lab3_2/</guid>
      <description>閒聊 2020 年過去了，因為年底各種考試和工作， Lab3 下半部份延遲到現在才完成。雖然拖蠻久的，但是往好的方向看就是有在持續進行下去，沒有放棄就是好結局！最近心境上有蠻多變化的，其中本來對於目前工作內容很疑惑，覺得跟純軟生活落差太大，但是在工作中慢慢地發現自己對於 security 領域的認知嚴重不足，如果能好好學習 security 相關知識，對於自己和未來發展還是挺有幫助的，結合 security 與 embedded or cloud 去發展，是一個有趣又有挑戰性的目標，因此目前就朝著這方向努力，希望今年可以在 COSCUP 分享 security 相關議題。</description>
    </item>
    
    <item>
      <title>Security model of password managers</title>
      <link>https://yushuanhsieh.github.io/post/2021-01-15-security_module/</link>
      <pubDate>Fri, 15 Jan 2021 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2021-01-15-security_module/</guid>
      <description>閒聊 這篇算是接續上次 Meetup 分享會的內容，由於有人提出 password manager 的相關疑問，覺得會不會因為使用 password manager 導致所有隱私資料被看光。與其猜測，不如來看看他們所提出的 security 方案，這篇以 1password 為例，整理其中 security white paper 所提到的保存資料方式，來檢視是不是能夠防止資料被盜取。</description>
    </item>
    
    <item>
      <title>GDG Hsinchu 12 月 Meetup - Improve Your Web Authentication Security</title>
      <link>https://yushuanhsieh.github.io/post/2020-12-23-web_auth/</link>
      <pubDate>Wed, 23 Dec 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-12-23-web_auth/</guid>
      <description>閒聊 12 月份完成好幾項目標，其中一項就是催生 GDG Hsinchu 12 月份的 Meetup 線下聚會。這次活動跟著 Google 在 12 月時舉辦的 Chrome Dev Summit 2020 一同推出，取自 CDS 中的部分 SMS-OTP 內容，並結合既有的 password-based authentication 與未來有可能普及的 FIDO 2 認證機制，整理出一份 Web Authentication Security 的技術分享。其中對我來說，比較有趣的地方在於理解機制的實現原理，包含資料溝通和驗證，以及可能會產生的安全問題。其實標準規範對於開發者來說相當重要，透過分析 protocol 的行為，可以讓開發者在開發整合性功能的時候，更清楚這些 library 要在什麼時機點使用，以及為什麼要使用這些 functions，這也是我每次進行技術分享時，最希望能夠帶給與會者的內容。</description>
    </item>
    
    <item>
      <title>CSE 506 Lab 3 - User Environments(Processes)</title>
      <link>https://yushuanhsieh.github.io/post/2020-11-25-lab3_1/</link>
      <pubDate>Wed, 25 Nov 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-11-25-lab3_1/</guid>
      <description>閒聊 之前在辦活動的時候，得知有朋友在 follow 我的 Blog ，真是讓我非常訝異，因為我一直是默默撰寫文章，而且雖然我有參與 Golang 和 GDG 社群，但是我寫的內容很常都跟 Golang 和 Google 技術沒什麼太大關係 XD 非常感謝各位的觀看，之前有近兩個月都沒更新，感覺有點罪惡，以後會盡量定期更新的。</description>
    </item>
    
    <item>
      <title>CSE 506 Lab2 - Memory Management and Virtual Memory Mapping</title>
      <link>https://yushuanhsieh.github.io/post/2020-11-15-lab2_2/</link>
      <pubDate>Sun, 15 Nov 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-11-15-lab2_2/</guid>
      <description>閒聊 上次寫完 Lab 2 source code study 之後，一晃眼就過了近兩個月。中間被各種事物攔截，加上剛好有些機遇和機會，因此挪了一些時間去準備，等事情有比較明朗後再跟大家分享。此外，學校也開學了，這學期修了偏硬體架構的課程，包含 RISC-V 和架構效能分析等，單智君教授的教學內容很好，聲音也很溫柔，非常喜歡這位教授的課程。</description>
    </item>
    
    <item>
      <title>GopherCon TW 2020 場務組心得</title>
      <link>https://yushuanhsieh.github.io/post/2020-11-14-gophercon_2020/</link>
      <pubDate>Sat, 14 Nov 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-11-14-gophercon_2020/</guid>
      <description>前言 從 2020 年初就開始籌備的第一屆 GopherCon TW ，終於在 11/14(六) 美好地落幕。第一次籌備就遇上疫情問題，導致時程一再延遲，還有首次主辦 conference 經驗不足，有一些遺漏以及沒有注意到的地方，所以自認籌辦期間沒有做的很好 TT</description>
    </item>
    
    <item>
      <title>CSE 506 Lab2 - E820 Memory Map &amp; Page Translation (1)</title>
      <link>https://yushuanhsieh.github.io/post/2020-09-12-lab2-1/</link>
      <pubDate>Sat, 12 Sep 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-09-12-lab2-1/</guid>
      <description>前言 之前是看 COMP790 的課程，但是實作起來發現有點問題，而且題目跟實際 source code 說明不太一樣。在花了很多時間釐清之後，發現原課程內容可能來自於 CSE 506: Lecture from Stony Brook University，仔細看了一下 CSE 506 的 Lab 課程，發現題目與 source code 相符程度較高，因此後續會改看 CSE 506 這系列課程。</description>
    </item>
    
    <item>
      <title>Vault Initialization and Keys Security</title>
      <link>https://yushuanhsieh.github.io/post/2020-09-04-vault-security/</link>
      <pubDate>Fri, 04 Sep 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-09-04-vault-security/</guid>
      <description>預備知識 在閱讀下方內容之前，建議先對 Vault 架構有個基本了解，相關官方文章如下：
 Vault Architecture Vault Key Rotation Vault Seal/Unseal  另外， Barrier 這個元件在 Vault 相當重要，在 Vault Architecture 頁面中有提及，可以先了解其用意，再來看它是如何被實現。</description>
    </item>
    
    <item>
      <title>CSE 506 Lab1 - The Stack</title>
      <link>https://yushuanhsieh.github.io/post/2020-08-25-comp790-lab1/</link>
      <pubDate>Tue, 25 Aug 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-08-25-comp790-lab1/</guid>
      <description>前言 課程 Operating System Implementation，Lab1 x86 Assembly and Bootloader 是個簡單的實作開場(Lab 源自於 MIT 課程)，不過其中卻有蠻多學習的地方。這次來記錄一下 Lab 1 中的 The Stack 實作部分，實作過程中除了需要用 gdb 之外，也需要搭配 asm code。</description>
    </item>
    
    <item>
      <title>CSE 506 Lab 環境建置</title>
      <link>https://yushuanhsieh.github.io/post/2020-08-24-comp790-tool/</link>
      <pubDate>Mon, 24 Aug 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-08-24-comp790-tool/</guid>
      <description>前言 由於下學期要上計算機結構的課程，所以趁著開課之前來複習一下 OS。這次看的課程是 UNC Operating System Implementation，基本上這課程也是引用 MIT 知名的 JOS 實作，再加上清楚明瞭的 Slides，光是一堂課就能有蠻多地收穫。</description>
    </item>
    
    <item>
      <title>COSCUP 2020 - Goroutine stack and local variable allocation in Go</title>
      <link>https://yushuanhsieh.github.io/post/2020-08-04-coscup-go/</link>
      <pubDate>Tue, 04 Aug 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-08-04-coscup-go/</guid>
      <description>Q&amp;amp;A 補充 Slides: Goroutine stack and local variable allocation in Go</description>
    </item>
    
    <item>
      <title>Cross-Network Container Communication</title>
      <link>https://yushuanhsieh.github.io/post/2020-07-05-docker-network/</link>
      <pubDate>Sun, 05 Jul 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-07-05-docker-network/</guid>
      <description>在 Docker 的網路規則中，由於 DOCKER-ISOLATION-STAGE-1、DOCKER-ISOLATION-STAGE-2 兩個 iptables chain 的關係，因此不同 Docker network 連結的 container 是無法互相溝通的。不過，我們可以透過建立 router 的手段來規避掉 chain 的限制，讓 container 收到其他 container 來的packages。此方式涉及到 Linux Bridge 處理封包的方式和基本網路知識，希望透過此介紹，來更了解 network stack 與 packages 處理流程。</description>
    </item>
    
    <item>
      <title>2020/05 月份自我學習回顧</title>
      <link>https://yushuanhsieh.github.io/post/2020-06-25-study-05/</link>
      <pubDate>Thu, 25 Jun 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-06-25-study-05/</guid>
      <description>間隔了好一陣子沒有寫自我學習回顧，其實還是有持續在記錄，不過因為剛換新工作的關係，就忙著適應～以及學校那邊的課程也是如火如荼的進展中，就沒更新這種閒聊性質的文章了，不過技術相關的還是有努力撰寫唷 ・ω・
5 月份主要都在念兩大項目：SDN 和 GCP cloud 線上課程。本來是預期在六月的時候去考試的，沒想到 SDN 期末考就先到來了，因此預計 GCP 考試就會延到七月份。另外，七月也要開始準備 COSCUP 分享，這次題目我很喜歡，但是卻也不好準備，希望不要讓底下的聽眾失望，我會好好加油的！</description>
    </item>
    
    <item>
      <title>Escape analysis issues of strings builder</title>
      <link>https://yushuanhsieh.github.io/post/2020-06-24-strings-builder/</link>
      <pubDate>Wed, 24 Jun 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-06-24-strings-builder/</guid>
      <description>在分享 Go string to slice 議題 文章後，有朋友(感謝@陳孝思)在社團裡面分享另一個議題，關於在 strings package 的 builder 中有避免 escape analysis 的方式。基於這個分享，我就去查閱了相關 source code 和 issues ，並且整理成此文章。</description>
    </item>
    
    <item>
      <title>Go string to slice 議題</title>
      <link>https://yushuanhsieh.github.io/post/2020-06-01-string-to-slice/</link>
      <pubDate>Mon, 01 Jun 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-06-01-string-to-slice/</guid>
      <description>日前在看 Go runtime/string.go source code 的時候，意外看到一篇文章 Go中string转[]byte的陷阱，不過這篇文章的日期間隔已久，Go version 也從文章中的 1.10 改版到 1.</description>
    </item>
    
    <item>
      <title>Introduction to ingress-gce controller</title>
      <link>https://yushuanhsieh.github.io/post/2020-05-28-ingress-gce/</link>
      <pubDate>Thu, 28 May 2020 08:00:00 +0800</pubDate>
      
      <guid>https://yushuanhsieh.github.io/post/2020-05-28-ingress-gce/</guid>
      <description>如果想要在 Google Cloud Platform 的 GKE 上使用 Ingress 功能，最簡單的方式就是用 GKE 本身預設提供的 ingress-gce controller。不過不知道大家在設定 ingress yaml 的時候，有沒有留意到 ingress-gce 規定 service type 只能是 NodePort，但是 ingress-nginx 卻沒有這種限制呢？</description>
    </item>
    
  </channel>
</rss>
